(function(Q, j) {
    var G = Math
      , D = j.createElement("div").style
      , N = function() {
        var E = "t,webkitT,MozT,msT,OT".split(","), M, S = 0, T = E.length;
        for (; S < T; S++) {
            M = E[S] + "ransform";
            if (M in D) {
                return E[S].substr(0, E[S].length - 1)
            }
        }
        return false
    }()
      , L = N ? "-" + N.toLowerCase() + "-" : ""
      , F = Af("transform")
      , P = Af("transitionProperty")
      , U = Af("transitionDuration")
      , W = Af("transformOrigin")
      , C = Af("transitionTimingFunction")
      , k = Af("transitionDelay")
      , H = /android/gi.test(navigator.appVersion)
      , O = /iphone|ipad/gi.test(navigator.appVersion)
      , K = /hp-tablet/gi.test(navigator.appVersion)
      , V = Af("perspective") in D
      , Z = "ontouchstart" in Q && !K
      , Aa = N !== false
      , Ag = Af("transition") in D
      , q = "onorientationchange" in Q ? "orientationchange" : "resize"
      , A = Z ? "touchstart" : "mousedown"
      , R = Z ? "touchmove" : "mousemove"
      , I = Z ? "touchend" : "mouseup"
      , Ac = Z ? "touchcancel" : "mouseup"
      , J = function() {
        if (N === false) {
            return false
        }
        var E = {
            "": "transitionend",
            webkit: "webkitTransitionEnd",
            Moz: "transitionend",
            O: "otransitionend",
            ms: "MSTransitionEnd"
        };
        return E[N]
    }()
      , Ae = function() {
        return Q.requestAnimationFrame || Q.webkitRequestAnimationFrame || Q.mozRequestAnimationFrame || Q.oRequestAnimationFrame || Q.msRequestAnimationFrame || function(E) {
            return setTimeout(E, 1)
        }
    }()
      , Ab = function() {
        return Q.cancelRequestAnimationFrame || Q.webkitCancelAnimationFrame || Q.webkitCancelRequestAnimationFrame || Q.mozCancelRequestAnimationFrame || Q.oCancelRequestAnimationFrame || Q.msCancelRequestAnimationFrame || clearTimeout
    }()
      , B = V ? " translateZ(0)" : ""
      , Ad = function(M, E) {
        var T = this, S;
        T.wrapper = typeof M == "object" ? M : j.getElementById(M);
        T.wrapper.style.overflow = "hidden";
        T.scroller = T.wrapper.children[0];
        T.options = {
            hScroll: true,
            vScroll: true,
            x: 0,
            y: 0,
            bounce: true,
            bounceLock: false,
            momentum: true,
            lockDirection: true,
            useTransform: true,
            useTransition: false,
            topOffset: 0,
            checkDOMChanges: false,
            handleClick: true,
            hScrollbar: true,
            vScrollbar: true,
            fixedScrollbar: H,
            hideScrollbar: O,
            fadeScrollbar: O && V,
            scrollbarClass: "",
            zoom: false,
            zoomMin: 1,
            zoomMax: 4,
            doubleTapZoom: 2,
            wheelAction: "scroll",
            snap: false,
            snapThreshold: 1,
            onRefresh: null ,
            onBeforeScrollStart: function(X) {
                X.preventDefault()
            },
            onScrollStart: null ,
            onBeforeScrollMove: null ,
            onScrollMove: null ,
            onBeforeScrollEnd: null ,
            onScrollEnd: null ,
            onTouchEnd: null ,
            onDestroy: null ,
            onZoomStart: null ,
            onZoom: null ,
            onZoomEnd: null 
        };
        for (S in E) {
            T.options[S] = E[S]
        }
        T.x = T.options.x;
        T.y = T.options.y;
        T.options.useTransform = Aa && T.options.useTransform;
        T.options.hScrollbar = T.options.hScroll && T.options.hScrollbar;
        T.options.vScrollbar = T.options.vScroll && T.options.vScrollbar;
        T.options.zoom = T.options.useTransform && T.options.zoom;
        T.options.useTransition = Ag && T.options.useTransition;
        if (T.options.zoom && H) {
            B = ""
        }
        T.scroller.style[P] = T.options.useTransform ? L + "transform" : "top left";
        T.scroller.style[U] = "0";
        T.scroller.style[W] = "0 0";
        if (T.options.useTransition) {
            T.scroller.style[C] = "cubic-bezier(0.33,0.66,0.66,1)"
        }
        if (T.options.useTransform) {
            T.scroller.style[F] = "translate(" + T.x + "px," + T.y + "px)" + B
        } else {
            T.scroller.style.cssText += ";position:absolute;top:" + T.y + "px;left:" + T.x + "px"
        }
        if (T.options.useTransition) {
            T.options.fixedScrollbar = true
        }
        T.refresh();
        T._bind(q, Q);
        T._bind(A);
        if (!Z) {
            if (T.options.wheelAction != "none") {
                T._bind("DOMMouseScroll");
                T._bind("mousewheel")
            }
        }
        if (T.options.checkDOMChanges) {
            T.checkDOMTime = setInterval(function() {
                T._checkDOMChanges()
            }, 500)
        }
    }
    ;
    Ad.prototype = {
        enabled: true,
        x: 0,
        y: 0,
        steps: [],
        scale: 1,
        currPageX: 0,
        currPageY: 0,
        pagesX: [],
        pagesY: [],
        aniTime: null ,
        wheelZoomCount: 0,
        handleEvent: function(E) {
            var M = this;
            switch (E.type) {
            case A:
                if (!Z && E.button !== 0) {
                    return
                }
                M._start(E);
                break;
            case R:
                M._move(E);
                break;
            case I:
            case Ac:
                M._end(E);
                break;
            case q:
                M._resize();
                break;
            case "DOMMouseScroll":
            case "mousewheel":
                M._wheel(E);
                break;
            case J:
                M._transitionEnd(E);
                break
            }
        },
        _checkDOMChanges: function() {
            if (this.moved || this.zoomed || this.animating || this.scrollerW == this.scroller.offsetWidth * this.scale && this.scrollerH == this.scroller.offsetHeight * this.scale) {
                return
            }
            this.refresh()
        },
        _scrollbar: function(M) {
            var E = this, S;
            if (!E[M + "Scrollbar"]) {
                if (E[M + "ScrollbarWrapper"]) {
                    if (Aa) {
                        E[M + "ScrollbarIndicator"].style[F] = ""
                    }
                    E[M + "ScrollbarWrapper"].parentNode.removeChild(E[M + "ScrollbarWrapper"]);
                    E[M + "ScrollbarWrapper"] = null ;
                    E[M + "ScrollbarIndicator"] = null 
                }
                return
            }
            if (!E[M + "ScrollbarWrapper"]) {
                S = j.createElement("div");
                if (E.options.scrollbarClass) {
                    S.className = E.options.scrollbarClass + M.toUpperCase()
                } else {
                    S.style.cssText = "position:absolute;z-index:100;" + (M == "h" ? "height:7px;bottom:1px;left:2px;right:" + (E.vScrollbar ? "7" : "2") + "px" : "width:7px;bottom:" + (E.hScrollbar ? "7" : "2") + "px;top:2px;right:1px")
                }
                S.style.cssText += ";pointer-events:none;" + L + "transition-property:opacity;" + L + "transition-duration:" + (E.options.fadeScrollbar ? "350ms" : "0") + ";overflow:hidden;opacity:" + (E.options.hideScrollbar ? "0" : "1");
                E.wrapper.appendChild(S);
                E[M + "ScrollbarWrapper"] = S;
                S = j.createElement("div");
                if (!E.options.scrollbarClass) {
                    S.style.cssText = "position:absolute;z-index:100;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);" + L + "background-clip:padding-box;" + L + "box-sizing:border-box;" + (M == "h" ? "height:100%" : "width:100%") + ";" + L + "border-radius:3px;border-radius:3px"
                }
                S.style.cssText += ";pointer-events:none;" + L + "transition-property:" + L + "transform;" + L + "transition-timing-function:cubic-bezier(0.33,0.66,0.66,1);" + L + "transition-duration:0;" + L + "transform: translate(0,0)" + B;
                if (E.options.useTransition) {
                    S.style.cssText += ";" + L + "transition-timing-function:cubic-bezier(0.33,0.66,0.66,1)"
                }
                E[M + "ScrollbarWrapper"].appendChild(S);
                E[M + "ScrollbarIndicator"] = S
            }
            if (M == "h") {
                E.hScrollbarSize = E.hScrollbarWrapper.clientWidth;
                E.hScrollbarIndicatorSize = G.max(G.round(E.hScrollbarSize * E.hScrollbarSize / E.scrollerW), 8);
                E.hScrollbarIndicator.style.width = E.hScrollbarIndicatorSize + "px";
                E.hScrollbarMaxScroll = E.hScrollbarSize - E.hScrollbarIndicatorSize;
                E.hScrollbarProp = E.hScrollbarMaxScroll / E.maxScrollX
            } else {
                E.vScrollbarSize = E.vScrollbarWrapper.clientHeight;
                E.vScrollbarIndicatorSize = G.max(G.round(E.vScrollbarSize * E.vScrollbarSize / E.scrollerH), 8);
                E.vScrollbarIndicator.style.height = E.vScrollbarIndicatorSize + "px";
                E.vScrollbarMaxScroll = E.vScrollbarSize - E.vScrollbarIndicatorSize;
                E.vScrollbarProp = E.vScrollbarMaxScroll / E.maxScrollY
            }
            E._scrollbarPos(M, true)
        },
        _resize: function() {
            var E = this;
            setTimeout(function() {
                E.refresh()
            }, H ? 200 : 0)
        },
        _pos: function(E, M) {
            if (this.zoomed) {
                return
            }
            E = this.hScroll ? E : 0;
            M = this.vScroll ? M : 0;
            if (this.options.useTransform) {
                this.scroller.style[F] = "translate(" + E + "px," + M + "px) scale(" + this.scale + ")" + B
            } else {
                E = G.round(E);
                M = G.round(M);
                this.scroller.style.left = E + "px";
                this.scroller.style.top = M + "px"
            }
            this.x = E;
            this.y = M;
            this._scrollbarPos("h");
            this._scrollbarPos("v")
        },
        _scrollbarPos: function(M, T) {
            var E = this, X = M == "h" ? E.x : E.y, S;
            if (!E[M + "Scrollbar"]) {
                return
            }
            X = E[M + "ScrollbarProp"] * X;
            if (X < 0) {
                if (!E.options.fixedScrollbar) {
                    S = E[M + "ScrollbarIndicatorSize"] + G.round(X * 3);
                    if (S < 8) {
                        S = 8
                    }
                    E[M + "ScrollbarIndicator"].style[M == "h" ? "width" : "height"] = S + "px"
                }
                X = 0
            } else {
                if (X > E[M + "ScrollbarMaxScroll"]) {
                    if (!E.options.fixedScrollbar) {
                        S = E[M + "ScrollbarIndicatorSize"] - G.round((X - E[M + "ScrollbarMaxScroll"]) * 3);
                        if (S < 8) {
                            S = 8
                        }
                        E[M + "ScrollbarIndicator"].style[M == "h" ? "width" : "height"] = S + "px";
                        X = E[M + "ScrollbarMaxScroll"] + (E[M + "ScrollbarIndicatorSize"] - S)
                    } else {
                        X = E[M + "ScrollbarMaxScroll"]
                    }
                }
            }
            E[M + "ScrollbarWrapper"].style[k] = "0";
            E[M + "ScrollbarWrapper"].style.opacity = T && E.options.hideScrollbar ? "0" : "1";
            E[M + "ScrollbarIndicator"].style[F] = "translate(" + (M == "h" ? X + "px,0)" : "0," + X + "px)") + B
        },
        _start: function(Y) {
            var d = this, M = Z ? Y.touches[0] : Y, E, S, T, X, b;
            if (!d.enabled) {
                return
            }
            if (d.options.onBeforeScrollStart) {
                d.options.onBeforeScrollStart.call(d, Y)
            }
            if (d.options.useTransition || d.options.zoom) {
                d._transitionTime(0)
            }
            d.moved = false;
            d.animating = false;
            d.zoomed = false;
            d.distX = 0;
            d.distY = 0;
            d.absDistX = 0;
            d.absDistY = 0;
            d.dirX = 0;
            d.dirY = 0;
            if (d.options.zoom && Z && Y.touches.length > 1) {
                X = G.abs(Y.touches[0].pageX - Y.touches[1].pageX);
                b = G.abs(Y.touches[0].pageY - Y.touches[1].pageY);
                d.touchesDistStart = G.sqrt(X * X + b * b);
                d.originX = G.abs(Y.touches[0].pageX + Y.touches[1].pageX - d.wrapperOffsetLeft * 2) / 2 - d.x;
                d.originY = G.abs(Y.touches[0].pageY + Y.touches[1].pageY - d.wrapperOffsetTop * 2) / 2 - d.y;
                if (d.options.onZoomStart) {
                    d.options.onZoomStart.call(d, Y)
                }
            }
            if (d.options.momentum) {
                if (d.options.useTransform) {
                    E = getComputedStyle(d.scroller, null )[F].replace(/[^0-9\-.,]/g, "").split(",");
                    S = +(E[12] || E[4]);
                    T = +(E[13] || E[5])
                } else {
                    S = +getComputedStyle(d.scroller, null ).left.replace(/[^0-9-]/g, "");
                    T = +getComputedStyle(d.scroller, null ).top.replace(/[^0-9-]/g, "")
                }
                if (S != d.x || T != d.y) {
                    if (d.options.useTransition) {
                        d._unbind(J)
                    } else {
                        Ab(d.aniTime)
                    }
                    d.steps = [];
                    d._pos(S, T);
                    if (d.options.onScrollEnd) {
                        d.options.onScrollEnd.call(d)
                    }
                }
            }
            d.absStartX = d.x;
            d.absStartY = d.y;
            d.startX = d.x;
            d.startY = d.y;
            d.pointX = M.pageX;
            d.pointY = M.pageY;
            d.startTime = Y.timeStamp || Date.now();
            if (d.options.onScrollStart) {
                d.options.onScrollStart.call(d, Y)
            }
            d._bind(R, Q);
            d._bind(I, Q);
            d._bind(Ac, Q)
        },
        _move: function(T) {
            var b = this, h = Z ? T.touches[0] : T, M = h.pageX - b.pointX, E = h.pageY - b.pointY, S = b.x + M, X = b.y + E, Y, g, d, m = T.timeStamp || Date.now();
            if (b.options.onBeforeScrollMove) {
                b.options.onBeforeScrollMove.call(b, T)
            }
            if (b.options.zoom && Z && T.touches.length > 1) {
                Y = G.abs(T.touches[0].pageX - T.touches[1].pageX);
                g = G.abs(T.touches[0].pageY - T.touches[1].pageY);
                b.touchesDist = G.sqrt(Y * Y + g * g);
                b.zoomed = true;
                d = 1 / b.touchesDistStart * b.touchesDist * this.scale;
                if (d < b.options.zoomMin) {
                    d = 0.5 * b.options.zoomMin * Math.pow(2, d / b.options.zoomMin)
                } else {
                    if (d > b.options.zoomMax) {
                        d = 2 * b.options.zoomMax * Math.pow(0.5, b.options.zoomMax / d)
                    }
                }
                b.lastScale = d / this.scale;
                S = this.originX - this.originX * b.lastScale + this.x;
                X = this.originY - this.originY * b.lastScale + this.y;
                this.scroller.style[F] = "translate(" + S + "px," + X + "px) scale(" + d + ")" + B;
                if (b.options.onZoom) {
                    b.options.onZoom.call(b, T)
                }
                return
            }
            b.pointX = h.pageX;
            b.pointY = h.pageY;
            if (S > 0 || S < b.maxScrollX) {
                S = b.options.bounce ? b.x + M / 2 : S >= 0 || b.maxScrollX >= 0 ? 0 : b.maxScrollX
            }
            if (X > b.minScrollY || X < b.maxScrollY) {
                X = b.options.bounce ? b.y + E / 2 : X >= b.minScrollY || b.maxScrollY >= 0 ? b.minScrollY : b.maxScrollY
            }
            b.distX += M;
            b.distY += E;
            b.absDistX = G.abs(b.distX);
            b.absDistY = G.abs(b.distY);
            if (b.absDistX < 6 && b.absDistY < 6) {
                return
            }
            if (b.options.lockDirection) {
                if (b.absDistX > b.absDistY + 5) {
                    X = b.y;
                    E = 0
                } else {
                    if (b.absDistY > b.absDistX + 5) {
                        S = b.x;
                        M = 0
                    }
                }
            }
            b.moved = true;
            b._pos(S, X);
            b.dirX = M > 0 ? -1 : M < 0 ? 1 : 0;
            b.dirY = E > 0 ? -1 : E < 0 ? 1 : 0;
            if (m - b.startTime > 300) {
                b.startTime = m;
                b.startX = b.x;
                b.startY = b.y
            }
            if (b.options.onScrollMove) {
                b.options.onScrollMove.call(b, T)
            }
        },
        _end: function(v) {
            if (Z && v.touches.length !== 0) {
                return
            }
            var M = this, E = Z ? v.changedTouches[0] : v, X, o, t = {
                dist: 0,
                time: 0
            }, s = {
                dist: 0,
                time: 0
            }, z = (v.timeStamp || Date.now()) - M.startTime, T = M.x, Ah = M.y, d, e, Y, w, a;
            M._unbind(R, Q);
            M._unbind(I, Q);
            M._unbind(Ac, Q);
            if (M.options.onBeforeScrollEnd) {
                M.options.onBeforeScrollEnd.call(M, v)
            }
            if (M.zoomed) {
                a = M.scale * M.lastScale;
                a = Math.max(M.options.zoomMin, a);
                a = Math.min(M.options.zoomMax, a);
                M.lastScale = a / M.scale;
                M.scale = a;
                M.x = M.originX - M.originX * M.lastScale + M.x;
                M.y = M.originY - M.originY * M.lastScale + M.y;
                M.scroller.style[U] = "200ms";
                M.scroller.style[F] = "translate(" + M.x + "px," + M.y + "px) scale(" + M.scale + ")" + B;
                M.zoomed = false;
                M.refresh();
                if (M.options.onZoomEnd) {
                    M.options.onZoomEnd.call(M, v)
                }
                return
            }
            if (!M.moved) {
                if (Z) {
                    if (M.doubleTapTimer && M.options.zoom) {
                        clearTimeout(M.doubleTapTimer);
                        M.doubleTapTimer = null ;
                        if (M.options.onZoomStart) {
                            M.options.onZoomStart.call(M, v)
                        }
                        M.zoom(M.pointX, M.pointY, M.scale == 1 ? M.options.doubleTapZoom : 1);
                        if (M.options.onZoomEnd) {
                            setTimeout(function() {
                                M.options.onZoomEnd.call(M, v)
                            }, 200)
                        }
                    } else {
                        if (this.options.handleClick) {
                            M.doubleTapTimer = setTimeout(function() {
                                M.doubleTapTimer = null ;
                                X = E.target;
                                while (X.nodeType != 1) {
                                    X = X.parentNode
                                }
                                if (X.tagName != "SELECT" && X.tagName != "INPUT" && X.tagName != "TEXTAREA") {
                                    o = j.createEvent("MouseEvents");
                                    o.initMouseEvent("click", true, true, v.view, 1, E.screenX, E.screenY, E.clientX, E.clientY, v.ctrlKey, v.altKey, v.shiftKey, v.metaKey, 0, null );
                                    o._fake = true;
                                    X.dispatchEvent(o)
                                }
                            }, M.options.zoom ? 250 : 0)
                        }
                    }
                }
                M._resetPos(400);
                if (M.options.onTouchEnd) {
                    M.options.onTouchEnd.call(M, v)
                }
                return
            }
            if (z < 300 && M.options.momentum) {
                t = T ? M._momentum(T - M.startX, z, -M.x, M.scrollerW - M.wrapperW + M.x, M.options.bounce ? M.wrapperW : 0) : t;
                s = Ah ? M._momentum(Ah - M.startY, z, -M.y, M.maxScrollY < 0 ? M.scrollerH - M.wrapperH + M.y - M.minScrollY : 0, M.options.bounce ? M.wrapperH : 0) : s;
                T = M.x + t.dist;
                Ah = M.y + s.dist;
                if (M.x > 0 && T > 0 || M.x < M.maxScrollX && T < M.maxScrollX) {
                    t = {
                        dist: 0,
                        time: 0
                    }
                }
                if (M.y > M.minScrollY && Ah > M.minScrollY || M.y < M.maxScrollY && Ah < M.maxScrollY) {
                    s = {
                        dist: 0,
                        time: 0
                    }
                }
            }
            if (t.dist || s.dist) {
                Y = G.max(G.max(t.time, s.time), 10);
                if (M.options.snap) {
                    d = T - M.absStartX;
                    e = Ah - M.absStartY;
                    if (G.abs(d) < M.options.snapThreshold && G.abs(e) < M.options.snapThreshold) {
                        M.scrollTo(M.absStartX, M.absStartY, 200)
                    } else {
                        w = M._snap(T, Ah);
                        T = w.x;
                        Ah = w.y;
                        Y = G.max(w.time, Y)
                    }
                }
                M.scrollTo(G.round(T), G.round(Ah), Y);
                if (M.options.onTouchEnd) {
                    M.options.onTouchEnd.call(M, v)
                }
                return
            }
            if (M.options.snap) {
                d = T - M.absStartX;
                e = Ah - M.absStartY;
                if (G.abs(d) < M.options.snapThreshold && G.abs(e) < M.options.snapThreshold) {
                    M.scrollTo(M.absStartX, M.absStartY, 200)
                } else {
                    w = M._snap(M.x, M.y);
                    if (w.x != M.x || w.y != M.y) {
                        M.scrollTo(w.x, w.y, w.time)
                    }
                }
                if (M.options.onTouchEnd) {
                    M.options.onTouchEnd.call(M, v)
                }
                return
            }
            M._resetPos(200);
            if (M.options.onTouchEnd) {
                M.options.onTouchEnd.call(M, v)
            }
        },
        _resetPos: function(M, T) {
            var X = this
              , E = X.x >= 0 ? 0 : X.x < X.maxScrollX ? X.maxScrollX : X.x
              , S = X.y >= X.minScrollY || X.maxScrollY > 0 ? X.minScrollY : X.y < X.maxScrollY ? X.maxScrollY : X.y;
            if (T) {
                S = S + T
            }
            if (E == X.x && S == X.y) {
                if (X.moved) {
                    X.moved = false;
                    if (X.options.onScrollEnd) {
                        X.options.onScrollEnd.call(X)
                    }
                }
                if (X.hScrollbar && X.options.hideScrollbar) {
                    if (N == "webkit") {
                        X.hScrollbarWrapper.style[k] = "300ms"
                    }
                    X.hScrollbarWrapper.style.opacity = "0"
                }
                if (X.vScrollbar && X.options.hideScrollbar) {
                    if (N == "webkit") {
                        X.vScrollbarWrapper.style[k] = "300ms"
                    }
                    X.vScrollbarWrapper.style.opacity = "0"
                }
                return
            }
            X.scrollTo(E, S, M || 0)
        },
        _wheel: function(S) {
            var X = this, Y, E, a, T, M;
            if ("wheelDeltaX" in S) {
                Y = S.wheelDeltaX / 12;
                E = S.wheelDeltaY / 12
            } else {
                if ("wheelDelta" in S) {
                    Y = E = S.wheelDelta / 12
                } else {
                    if ("detail" in S) {
                        Y = E = -S.detail * 3
                    } else {
                        return
                    }
                }
            }
            if (X.options.wheelAction == "zoom") {
                M = X.scale * Math.pow(2, 1 / 3 * (E ? E / Math.abs(E) : 0));
                if (M < X.options.zoomMin) {
                    M = X.options.zoomMin
                }
                if (M > X.options.zoomMax) {
                    M = X.options.zoomMax
                }
                if (M != X.scale) {
                    if (!X.wheelZoomCount && X.options.onZoomStart) {
                        X.options.onZoomStart.call(X, S)
                    }
                    X.wheelZoomCount++;
                    X.zoom(S.pageX, S.pageY, M, 400);
                    setTimeout(function() {
                        X.wheelZoomCount--;
                        if (!X.wheelZoomCount && X.options.onZoomEnd) {
                            X.options.onZoomEnd.call(X, S)
                        }
                    }, 400)
                }
                return
            }
            a = X.x + Y;
            T = X.y + E;
            if (a > 0) {
                a = 0
            } else {
                if (a < X.maxScrollX) {
                    a = X.maxScrollX
                }
            }
            if (T > X.minScrollY) {
                T = X.minScrollY
            } else {
                if (T < X.maxScrollY) {
                    T = X.maxScrollY
                }
            }
            if (X.maxScrollY < 0) {
                X.scrollTo(a, T, 0)
            }
        },
        _transitionEnd: function(E) {
            var M = this;
            if (E.target != M.scroller) {
                return
            }
            M._unbind(J);
            M._startAni()
        },
        _startAni: function() {
            var S = this, Y = S.x, E = S.y, a = Date.now(), X, M, T;
            if (S.animating) {
                return
            }
            if (!S.steps.length) {
                S._resetPos(400);
                return
            }
            X = S.steps.shift();
            if (X.x == Y && X.y == E) {
                X.time = 0
            }
            S.animating = true;
            S.moved = true;
            if (S.options.useTransition) {
                S._transitionTime(X.time);
                S._pos(X.x, X.y);
                S.animating = false;
                if (X.time) {
                    S._bind(J)
                } else {
                    S._resetPos(0)
                }
                return
            }
            T = function() {
                var b = Date.now(), d, e;
                if (b >= a + X.time) {
                    S._pos(X.x, X.y);
                    S.animating = false;
                    if (S.options.onAnimationEnd) {
                        S.options.onAnimationEnd.call(S)
                    }
                    S._startAni();
                    return
                }
                b = (b - a) / X.time - 1;
                M = G.sqrt(1 - b * b);
                d = (X.x - Y) * M + Y;
                e = (X.y - E) * M + E;
                S._pos(d, e);
                if (S.animating) {
                    S.aniTime = Ae(T)
                }
            }
            ;
            T()
        },
        _transitionTime: function(E) {
            E += "ms";
            this.scroller.style[U] = E;
            if (this.hScrollbar) {
                this.hScrollbarIndicator.style[U] = E
            }
            if (this.vScrollbar) {
                this.vScrollbarIndicator.style[U] = E
            }
        },
        _momentum: function(T, b, f, M, E) {
            var g = 0.0006
              , S = G.abs(T) / b
              , X = S * S / (2 * g)
              , Y = 0
              , d = 0;
            if (T > 0 && X > f) {
                d = E / (6 / (X / S * g));
                f = f + d;
                S = S * f / X;
                X = f
            } else {
                if (T < 0 && X > M) {
                    d = E / (6 / (X / S * g));
                    M = M + d;
                    S = S * M / X;
                    X = M
                }
            }
            X = X * (T < 0 ? -1 : 1);
            Y = S / g;
            return {
                dist: X,
                time: G.round(Y)
            }
        },
        _offset: function(E) {
            var M = -E.offsetLeft
              , S = -E.offsetTop;
            while (E = E.offsetParent) {
                M -= E.offsetLeft;
                S -= E.offsetTop
            }
            if (E != this.wrapper) {
                M *= this.scale;
                S *= this.scale
            }
            return {
                left: M,
                top: S
            }
        },
        _snap: function(T, b) {
            var d = this, M, E, f, S, X, Y;
            f = d.pagesX.length - 1;
            for (M = 0,
            E = d.pagesX.length; M < E; M++) {
                if (T >= d.pagesX[M]) {
                    f = M;
                    break
                }
            }
            if (f == d.currPageX && f > 0 && d.dirX < 0) {
                f--
            }
            T = d.pagesX[f];
            X = G.abs(T - d.pagesX[d.currPageX]);
            X = X ? G.abs(d.x - T) / X * 500 : 0;
            d.currPageX = f;
            f = d.pagesY.length - 1;
            for (M = 0; M < f; M++) {
                if (b >= d.pagesY[M]) {
                    f = M;
                    break
                }
            }
            if (f == d.currPageY && f > 0 && d.dirY < 0) {
                f--
            }
            b = d.pagesY[f];
            Y = G.abs(b - d.pagesY[d.currPageY]);
            Y = Y ? G.abs(d.y - b) / Y * 500 : 0;
            d.currPageY = f;
            S = G.round(G.max(X, Y)) || 200;
            return {
                x: T,
                y: b,
                time: S
            }
        },
        _bind: function(E, M, S) {
            (M || this.scroller).addEventListener(E, this, !!S)
        },
        _unbind: function(E, M, S) {
            (M || this.scroller).removeEventListener(E, this, !!S)
        },
        destroy: function() {
            var E = this;
            E.scroller.style[F] = "";
            E.hScrollbar = false;
            E.vScrollbar = false;
            E._scrollbar("h");
            E._scrollbar("v");
            E._unbind(q, Q);
            E._unbind(A);
            E._unbind(R, Q);
            E._unbind(I, Q);
            E._unbind(Ac, Q);
            if (!E.options.hasTouch) {
                E._unbind("DOMMouseScroll");
                E._unbind("mousewheel")
            }
            if (E.options.useTransition) {
                E._unbind(J)
            }
            if (E.options.checkDOMChanges) {
                clearInterval(E.checkDOMTime)
            }
            if (E.options.onDestroy) {
                E.options.onDestroy.call(E)
            }
        },
        refresh: function(T) {
            var Y = this, a, M, E, b, S = 0, X = 0;
            if (Y.scale < Y.options.zoomMin) {
                Y.scale = Y.options.zoomMin
            }
            Y.wrapperW = Y.wrapper.clientWidth || 1;
            Y.wrapperH = Y.wrapper.clientHeight || 1;
            Y.minScrollY = -Y.options.topOffset || 0;
            Y.scrollerW = G.round(Y.scroller.offsetWidth * Y.scale);
            Y.scrollerH = G.round((Y.scroller.offsetHeight + Y.minScrollY) * Y.scale);
            Y.maxScrollX = Y.wrapperW - Y.scrollerW;
            Y.maxScrollY = Y.wrapperH - Y.scrollerH + Y.minScrollY;
            Y.dirX = 0;
            Y.dirY = 0;
            if (Y.options.onRefresh) {
                Y.options.onRefresh.call(Y)
            }
            Y.hScroll = Y.options.hScroll && Y.maxScrollX < 0;
            Y.vScroll = Y.options.vScroll && (!Y.options.bounceLock && !Y.hScroll || Y.scrollerH > Y.wrapperH);
            Y.hScrollbar = Y.hScroll && Y.options.hScrollbar;
            Y.vScrollbar = Y.vScroll && Y.options.vScrollbar && Y.scrollerH > Y.wrapperH;
            a = Y._offset(Y.wrapper);
            Y.wrapperOffsetLeft = -a.left;
            Y.wrapperOffsetTop = -a.top;
            if (typeof Y.options.snap == "string") {
                Y.pagesX = [];
                Y.pagesY = [];
                b = Y.scroller.querySelectorAll(Y.options.snap);
                for (M = 0,
                E = b.length; M < E; M++) {
                    S = Y._offset(b[M]);
                    S.left += Y.wrapperOffsetLeft;
                    S.top += Y.wrapperOffsetTop;
                    Y.pagesX[M] = S.left < Y.maxScrollX ? Y.maxScrollX : S.left * Y.scale;
                    Y.pagesY[M] = S.top < Y.maxScrollY ? Y.maxScrollY : S.top * Y.scale
                }
            } else {
                if (Y.options.snap) {
                    Y.pagesX = [];
                    while (S >= Y.maxScrollX) {
                        Y.pagesX[X] = S;
                        S = S - Y.wrapperW;
                        X++
                    }
                    if (Y.maxScrollX % Y.wrapperW) {
                        Y.pagesX[Y.pagesX.length] = Y.maxScrollX - Y.pagesX[Y.pagesX.length - 1] + Y.pagesX[Y.pagesX.length - 1]
                    }
                    S = 0;
                    X = 0;
                    Y.pagesY = [];
                    while (S >= Y.maxScrollY) {
                        Y.pagesY[X] = S;
                        S = S - Y.wrapperH;
                        X++
                    }
                    if (Y.maxScrollY % Y.wrapperH) {
                        Y.pagesY[Y.pagesY.length] = Y.maxScrollY - Y.pagesY[Y.pagesY.length - 1] + Y.pagesY[Y.pagesY.length - 1]
                    }
                }
            }
            Y._scrollbar("h");
            Y._scrollbar("v");
            if (!Y.zoomed) {
                Y.scroller.style[U] = "0";
                if (T == 0) {
                    Y._resetPos(400)
                } else {
                    if (T < 0) {
                        Y._resetPos(400, T)
                    }
                }
            }
        },
        scrollTo: function(T, X, b, Y) {
            var M = this, E = T, a, S;
            M.stop();
            if (!E.length) {
                E = [{
                    x: T,
                    y: X,
                    time: b,
                    relative: Y
                }]
            }
            for (a = 0,
            S = E.length; a < S; a++) {
                if (E[a].relative) {
                    E[a].x = M.x - E[a].x;
                    E[a].y = M.y - E[a].y
                }
                M.steps.push({
                    x: E[a].x,
                    y: E[a].y,
                    time: E[a].time || 0
                })
            }
            M._startAni()
        },
        scrollToElement: function(M, S) {
            var E = this, T;
            M = M.nodeType ? M : E.scroller.querySelector(M);
            if (!M) {
                return
            }
            T = E._offset(M);
            T.left += E.wrapperOffsetLeft;
            T.top += E.wrapperOffsetTop;
            T.left = T.left > 0 ? 0 : T.left < E.maxScrollX ? E.maxScrollX : T.left;
            T.top = T.top > E.minScrollY ? E.minScrollY : T.top < E.maxScrollY ? E.maxScrollY : T.top;
            S = S === undefined ? G.max(G.abs(T.left) * 2, G.abs(T.top) * 2) : S;
            E.scrollTo(T.left, T.top, S)
        },
        scrollToPage: function(M, T, X) {
            var E = this, Y, S;
            X = X === undefined ? 400 : X;
            if (E.options.onScrollStart) {
                E.options.onScrollStart.call(E)
            }
            if (E.options.snap) {
                M = M == "next" ? E.currPageX + 1 : M == "prev" ? E.currPageX - 1 : M;
                T = T == "next" ? E.currPageY + 1 : T == "prev" ? E.currPageY - 1 : T;
                M = M < 0 ? 0 : M > E.pagesX.length - 1 ? E.pagesX.length - 1 : M;
                T = T < 0 ? 0 : T > E.pagesY.length - 1 ? E.pagesY.length - 1 : T;
                E.currPageX = M;
                E.currPageY = T;
                Y = E.pagesX[M];
                S = E.pagesY[T]
            } else {
                Y = -E.wrapperW * M;
                S = -E.wrapperH * T;
                if (Y < E.maxScrollX) {
                    Y = E.maxScrollX
                }
                if (S < E.maxScrollY) {
                    S = E.maxScrollY
                }
            }
            E.scrollTo(Y, S, X)
        },
        disable: function() {
            this.stop();
            this._resetPos(0);
            this.enabled = false;
            this._unbind(R, Q);
            this._unbind(I, Q);
            this._unbind(Ac, Q)
        },
        enable: function() {
            this.enabled = true
        },
        stop: function() {
            if (this.options.useTransition) {
                this._unbind(J)
            } else {
                Ab(this.aniTime)
            }
            this.steps = [];
            this.moved = false;
            this.animating = false
        },
        zoom: function(M, T, X, E) {
            var Y = this
              , S = X / Y.scale;
            if (!Y.options.useTransform) {
                return
            }
            Y.zoomed = true;
            E = E === undefined ? 200 : E;
            M = M - Y.wrapperOffsetLeft - Y.x;
            T = T - Y.wrapperOffsetTop - Y.y;
            Y.x = M - M * S + Y.x;
            Y.y = T - T * S + Y.y;
            Y.scale = X;
            Y.refresh();
            Y.x = Y.x > 0 ? 0 : Y.x < Y.maxScrollX ? Y.maxScrollX : Y.x;
            Y.y = Y.y > Y.minScrollY ? Y.minScrollY : Y.y < Y.maxScrollY ? Y.maxScrollY : Y.y;
            Y.scroller.style[U] = E + "ms";
            Y.scroller.style[F] = "translate(" + Y.x + "px," + Y.y + "px) scale(" + X + ")" + B;
            Y.zoomed = false
        },
        isReady: function() {
            return !this.moved && !this.zoomed && !this.animating
        }
    };
    function Af(E) {
        if (N === "") {
            return E
        }
        E = E.charAt(0).toUpperCase() + E.substr(1);
        return N + E
    }
    D = null ;
    if (typeof exports !== "undefined") {
        exports.iScroll = Ad
    } else {
        Q.iScroll = Ad
    }
})(window, document);
