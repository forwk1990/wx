define([],
    function() {
        var a = {
            currCity: null,
            defultCity: {
                name: "武汉",
                citycode: "169"
            },
            localExpireTimeInMS: 30 * 24 * 60 * 60 * 1000,
            localTempOrders: null,
            orderInfo: null,
            searchKey: "",
            sysTime: 0,
            getLocalItem: function(d) {
                var e = localStorage[d];
                if (!e) {
                    return null
                }
                var b = null;
                try {
                    b = JSON.parse(e)
                } catch(c) {
                    delete localStorage[d]
                }
                if (!b) {
                    return null
                }
                if ((new Date().getTime() - b.t) > this.localExpireTimeInMS) {
                    delete localStorage[d];
                    return null
                }
                return b.d
            },
            setLocalItem: function(b, d) {
                var c = {
                    d: d,
                    t: (new Date()).getTime()
                };
                localStorage[b] = JSON.stringify(c)
            },
            removeLocalItem: function(b) {
                localStorage.removeItem(b)
            },
            sessionExpireTimeInMS: 30 * 60 * 1000,
            getSessionItem: function(e) {
                var c = sessionStorage[e];
                if (!c) {
                    return null
                }
                var b = null;
                try {
                    b = JSON.parse(c)
                } catch(d) {
                    delete sessionStorage[e]
                }
                if (!b) {
                    return null
                }
                if ((new Date().getTime() - b.t) > this.sessionExpireTimeInMS) {
                    delete sessionStorage[e];
                    return null
                }
                return b.d
            },
            setSessionItem: function(c, d) {
                var b = {
                    d: d,
                    t: (new Date()).getTime()
                };
                sessionStorage[c] = JSON.stringify(b)
            },
            removeSessionItem: function(b) {
                sessionStorage.removeItem(b)
            },
            getLocateCity: function() {
                return this.getSessionItem("preorder.wap.locateCity")
            },
            saveLocateCity: function(b) {
                this.setSessionItem("preorder.wap.locateCity", b)
            },
            saveCurrCity: function(b) {
                this.setSessionItem("preorder.wap.currCity", b);
                this.currCity = b
            },
            getCurrCity: function() {
                if (!this.currCity) {
                    this.currCity = this.getSessionItem("preorder.wap.currCity");
                    if (!this.currCity) {
                        return this.defultCity
                    }
                }
                return this.currCity
            },
            saveCurrentStore: function(b) {
                this.setSessionItem("preorder.wap.currentStore", b);
                this.currentStore = b
            },
            getCurrentStore: function() {
                if (!this.currentStore) {
                    this.currentStore = this.getSessionItem("preorder.wap.currentStore")
                }
                return this.currentStore
            },
            saveCustomerInfo: function(b) {
                this.setSessionItem("preorder.wap.customerInfo", b);
                this.customerInfo = b
            },
            getCustomerInfo: function() {
                if (!this.customerInfo) {
                    this.customerInfo = this.getSessionItem("preorder.wap.customerInfo")
                }
                return this.customerInfo
            },
            clearCustomerInfo: function() {
                this.customerInfo = null;
                this.removeSessionItem("preorder.wap.customerInfo")
            },
            removeOrderInfo: function() {
                this.removeSessionItem("preorder.wap.orderInfo");
                this.orderInfo = null
            },
            saveOrderInfo: function(b) {
                this.setSessionItem("preorder.wap.orderInfo", b);
                this.orderInfo = b
            },
            getOrderInfo: function() {
                if (!this.orderInfo) {
                    this.orderInfo = this.getSessionItem("preorder.wap.orderInfo")
                }
                return this.orderInfo
            },
            getLocalTempOrders: function() {
                if (!this.localTempOrders) {
                    return localTempOrders = this.getSessionItem("preorder.wap.localTempOrders")
                }
                return this.localTempOrders
            },
            updateLocalTempOrders: function(c, b) {
                var d = c.topType + "_" + c.systemId;
                var f = this.getLocalTempOrders();
                if (!f) {
                    f = {}
                }
                var g = f[d];
                if (g) {
                    var e = b ? g.quantity + 1: g.quantity - 1;
                    f[d].quantity = e;
                    if (e == 0) {
                        delete f[d]
                    }
                } else {
                    f[d] = {
                        quantity: (b ? 1: -1),
                        price: c.foodPrice
                    }
                }
                this.localTempOrders = f;
                this.setSessionItem("preorder.wap.localTempOrders", f)
            },
            removeLocalTempOrders: function() {
                this.localTempOrders = null;
                this.removeSessionItem("preorder.wap.localTempOrders")
            },
            getView: function(b) {
                return "../templates/" + b
            },
            getQueryStringValue: function(b) {
                var c = new RegExp("(^|&)" + b + "=([^&]*)(&|$)", "i");
                var d = window.location.search.substr(1).match(c);
                if (d != null) {
                    return unescape(d[2])
                }
                return null
            },
            setQueryString: function(c) {
                var d = "?";
                for (var b in c) {
                    d += encodeURIComponent(b) + "=" + encodeURIComponent(c[b]) + "&"
                }
                return d.substr(0, d.length - 1)
            },
            randomOfNumber: function(d) {
                d = d < 0 || d >= 6 ? 4: d;
                var c = "";
                for (var b = 0; b < d; b++) {
                    c += Math.floor(Math.random() * 10)
                }
                return c
            },
            startWith: function(b, c) {
                if (b == null || b == "" || b.length == 0) {
                    return false
                }
                if (c == null || c == "" || c.length > b.length) {
                    return false
                }
                if (b.substr(0, c.length) == c) {
                    return true
                } else {
                    return false
                }
                return true
            },
            preloadImage: function(b, d) {
                var c = function(f, g) {
                    var e = new Image();
                    e.src = f;
                    if (e.complete) {
                        g(e.width, e.height)
                    } else {
                        e.onload = function() {
                            g(e.width, e.height);
                            e.onload = null
                        }
                    }
                };
                d = d ||
                    function() {};
                c(Config.wapcontext + "images/" + b, d)
            },
            showInstantMessage: function(e) {
                $("#instantTipsBox").remove();
                var b = {
                    content: "",
                    duration: 3000
                };
                $.extend(b, e);
                var h = '<div id="instantTipsBox" style="max-width:300px;padding:10px;background-color:black;filter:alpha(opacity:70);opacity:0.7;border-radius:4px;-webkit-border-radius: 4px;-moz-border-radius: 4px;color:#fff;-webkit-box-shadow: 0 0 3px #ddd inset;text-align:left;position:fixed;z-index:999;word-break:break-all;word-wrap:break-word;">' + b.content + "</div>"; + $("body").prepend(h);
                var c = document.documentElement.clientWidth;
                var f = document.documentElement.clientHeight;
                var d = $("#instantTipsBox").width();
                var g = $("#instantTipsBox").height();
                $("#instantTipsBox").css({
                    top: (f - g) / 2 + "px",
                    left: (c - d) / 2 + "px"
                });
                setTimeout(function() {
                        $("#instantTipsBox").remove()
                    },
                    b.duration)
            },
            confirm: function(d, b, e) {
                var c = {
                    caption: "友情提示",
                    description: "",
                    okCaption: "确定",
                    cancelCaption: "取消"
                };
                $.extend(c, d);
                var f = '<div id="confirm" class="confirm-layer-box"><div id="confirmLayer" class="confirm-layer"></div><div id="confirmBox" class="pr-miss" style="z-index:20;display:block;"><h4 id="confirmTip">' + c.caption + '</h4><p id="confirmContent">' + c.description + '</p><span id="confirmOk" class="qd">' + c.okCaption + '</span><span id="confirmNo" class="qx">' + c.cancelCaption + "</span></div></div>";
                $("#pagecontent").append(f);
                $("#confirm").show();
                $("#confirm").on("touchmove",
                    function(g) {
                        g.preventDefault();
                        return false
                    });
                $("#confirmOk").click(function() {
                    $("#confirm").hide();
                    $("#confirm").remove();
                    if (typeof(b) == "function") {
                        b()
                    }
                });
                $("#confirmNo").click(function() {
                    $("#confirm").hide();
                    $("#confirm").remove();
                    if (typeof(e) == "function") {
                        e()
                    }
                })
            },
            formatFloat: function(c, d) {
                var b = Math.pow(10, d);
                return parseInt(c * b, 10) / b
            },
            calculateSum: function() {
                var d = this.getOrderInfo();
                if (d == null) {
                    return {
                        quantity: 0,
                        price: 0
                    }
                }
                var g = d.items;
                var f = 0,
                    b = 0;
                for (var c = 0; c < g.length; c++) {
                    var e = g[c];
                    f += parseInt(e.quantity);
                    b += e.quantity * (e.price * 100)
                }
                b = (parseFloat(b) / 100).toFixed(2);
                return {
                    quantity: f,
                    price: b
                }
            },
            geolocation: function(d) {
                var c = this;
                var b = false;
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function(e) {
                            if (c.utilities.isAliPayClient()) {
                                var f = {
                                    lng: e.coords.longitude,
                                    lat: e.coords.latitude
                                };
                                d && d(f)
                            } else {
                                require(["utils/wgs2mars.min"],
                                    function() {
                                        if (transformFromWGSToGCJ) {
                                            var g = transformFromWGSToGCJ(e.coords.longitude, e.coords.latitude);
                                            if (g && g.lng && g.lat && c.utilities.floatRge.test(g.lng) && c.utilities.floatRge.test(g.lat)) {
                                                d && d(g);
                                                return
                                            }
                                        }
                                        var g = {
                                            lng: e.coords.longitude,
                                            lat: e.coords.latitude
                                        };
                                        d && d(g)
                                    })
                            }
                        },
                        function(e) {
                            console.debug(" 获取GPS定位信息失败 ", e.code);
                            if (!b) {
                                d && d();
                                b = true
                            }
                        },
                        {
                            enableHighAcuracy: false,
                            timeout: 5000,
                            maximumAge: 30000
                        })
                } else {
                    console.debug(" 你的浏览器不支持 geolocation ");
                    d && d()
                }
            },
            utilities: {
                reCellphone: /^(13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9])\d{8}$/,
                rePassword: /^[\da-zA-Z]{6,20}$/i,
                reNumber: /^\d{6}$/,
                floatRge: /^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$/
            },
            Route: {
                tags: ["storemenu", "ordertallyup", "ordersuccess", "orderdetail","storelist","storeinfo","queuecertificate","mydines","storesearch"],
                historyKeys: [],
                historyOptions: {},
                historyRouteAttr: {},
                homeScope: null,
                currentPage: "",
                back: function(d) {
                    if (this.historyKeys.length == 0) {
                        window.history.back();
                        return
                    }
                    var c = this.historyKeys.pop();
                    window.pageChangeOption = this.historyOptions[c];
                    if (d.pageChageOption) {
                        var b = d.pageChageOption(c);
                        if (b) {
                            window.pageChangeOption = b
                        }
                    }
                    can.route.attr(this.historyRouteAttr[c], true);
                    delete this.historyOptions[c];
                    delete this.historyRouteAttr[c]
                },
                route: function(g, d) {
                    var e = can.route.attr();
                    delete e.route;
                    var b = this.getPageTagNameByRouteAttr(e);
                    var f = this.getPageTagNameByRouteAttr(d);
                    var c = this;
                    if (!f) {
                        return
                    }
                    require(["appComponents/" + f],
                        function(k) {
                            c.currentPage = b;
                            var i = g.pageOption ? g.pageOption() : {};
                            var j = g.pageChangeOption ? g.pageChangeOption(f) : false;
                            window.pageChangeOption = j ? j: undefined;
                            var h = $.inArray(b, c.historyKeys);
                            if (h >= 0) {
                                c.historyKeys.splice(h, 1)
                            }
                            c.historyKeys.push(b);
                            c.historyOptions[b] = i;
                            c.historyRouteAttr[b] = e;
                            if (typeof(d) === "string") {
                                can.route.attr({
                                        page: d
                                    },
                                    true)
                            } else {
                                can.route.attr(d, true)
                            }
                        },
                        function(h) {
                            var i = h.requireModules && h.requireModules[0];
                            requirejs.undef(i);
                            a.showInstantMessage({
                                content: "获取组件" + f + "失败，请稍后再试...",
                                duration: 5000
                            });
                            a.Busy.stop()
                        })
                },
                getPageTagNameByRouteAttr: function(c) {
                    var b = "storemenu";
                    if (typeof(c) === "string") {
                        if ("" == c) {
                            c = "storemenu"
                        }
                        return c
                    }
                    if (c.page) {
                        b = c.page
                    }
                    if (c.func) {
                        b += c.func
                    }
                    if ($.inArray(b, this.tags) < 0) {
                        b = "storemenu"
                    }
                    return b
                }
            },
            Busy: {
                timer: null,
                start: function(c) {
                    var b = {
                        duration: 30000,
                        content: "客官，请稍等……",

                    };
                    $.extend(b, c);
                    var e = $(".overlay");
                    if (e && e.length > 0) {
                        return
                    }
                    var d = '<div class="overlay"></div><div class="loadingBox"><div class="box-loading"><div class="pageLoading"></div><div class="context-loading">' + b.content + "</div></div></div>";
                    $("body").append(d);
                    if (b.content) {
                        $(".box-loading").css({
                            "margin-left": "-90px",
                            "width": "180px"
                        })
                    }
                    $(".overlay").show(function() {
                        $(".overlay").on("touchmove",
                            function(f) {
                                f.preventDefault();
                                return false
                            });
                        $(".loadingBox").on("touchmove",
                            function(f) {
                                f.preventDefault();
                                return false
                            })
                    });
                    this.timer = setTimeout(function() {
                            $(".overlay").remove();
                            $(".loadingBox").remove()
                        },
                        b.duration)
                },
                stop: function() {
                    this.timer && clearTimeout(this.timer);
                    this.timer = null;
                    $(".overlay").remove();
                    $(".loadingBox").remove()
                }
            },
            lazyLoad: {
                lazy: function(b) {
                    var c = {
                        img: "img[real_src]",
                        real_src: "real_src",
                        animate: "",
                        animate_delay: 500,
                        animate_time: 1000,
                        time_out: 0
                    };
                    var b = $.extend(c, b);
                    return $("img").each(function() {
                        var d = 0;
                        if (window.innerHeight) {
                            d = window.innerHeight
                        } else {
                            if ((document.body) && (document.body.clientHeight)) {
                                d = document.body.clientHeight
                            }
                        }
                        foreach_img = function() {
                            $(b.img).each(function() {
                                var g = $(this);
                                var f = $(this).offset().top;
                                var e = (d) * 2;
                                if (f <= e) {
                                    var h = false;
                                    $(this).prop("src", $(this).attr(b.real_src));
                                    $(this).removeAttr(b.real_src);
                                    switch (b.animate) {
                                        case "fadeIn":
                                            $(this).css({
                                                "opacity":
                                                    "0"
                                            }).delay(b.animate_delay).animate({
                                                    "opacity":
                                                        "1"
                                                },
                                                b.animate_time);
                                            break;
                                        case "slideDown":
                                            $(this).css({
                                                "height":
                                                    "0px",
                                                "background": "url('.')"
                                            }).delay(b.animate_delay).animate({
                                                    "height": $(this).height() + "px"
                                                },
                                                b.animate_time);
                                            break;
                                        default:
                                            break
                                    }
                                    return true
                                }
                                return false
                            })
                        };
                        setTimeout(function() {
                                foreach_img()
                            },
                            b.time_out)
                    })
                }
            },
            LoadFile: {
                JSBasePath: Config.wapcontext + "javascripts/utils/",
                ComponentBasePath: Config.wapcontext + "javascripts/appComponents/",
                CssBasePath: Config.wapcontext + "stylesheets/",
                _hasLoadedFiles: {},
                loadJsFile: function(e, f) {
                    if (!this._hasLoadedFiles[e]) {
                        var d = document.createElement("script");
                        d.setAttribute("type", "text/javascript");
                        var b = this.JSBasePath + e;
                        d.setAttribute("src", b);
                        if (f) {
                            if (typeof f == "function") {
                                var c = function() {
                                    if (this.readyState == "complete" || this.readyState == "loaded") {
                                        f()
                                    }
                                };
                                d.onreadystatechange = c;
                                d.onload = f
                            } else {
                                if (typeof f == "string") {
                                    d.setAttribute("onload", f + "()")
                                }
                            }
                        }
                        document.getElementsByTagName("head")[0].appendChild(d);
                        this._hasLoadedFiles[e] = d
                    } else {
                        f()
                    }
                },
                loadCssFile: function(b) {
                    if (!this._hasLoadedFiles[b]) {
                        var c = document.createElement("link");
                        c.setAttribute("rel", "stylesheet");
                        c.setAttribute("type", "text/css");
                        c.setAttribute("href", this.CssBasePath + b);
                        document.getElementsByTagName("head")[0].appendChild(c);
                        this._hasLoadedFiles[b] = c
                    }
                },
                loadAmapScript: function(c) {
                    if (!this._hasLoadedFiles["amap"]) {
                        var b = document.createElement("script");
                        b.setAttribute("type", "text/javascript");
                        b.setAttribute("src", Config.amapJsPath + "&callback=" + c);
                        document.getElementsByTagName("head")[0].appendChild(b);
                        this._hasLoadedFiles["amap"] = b
                    }
                }
            },
            StoreMap: {
                loadedAmap: false,
                open: function(d, f, g) {
                    if (this.loadedAmap) {
                        var b = {
                            container: "iCenter"
                        };
                        $.extend(b, d);
                        $(".rest-list").hide();
                        this.LBSmap(b);
                        this.init(f);
                        a.Busy.stop()
                    } else {
                        var e = this;
                        window.amapInit = function() {
                            e.loadedAmap = true;
                            delete window.amapInit
                        };
                        a.LoadFile.loadAmapScript("amapInit");
                        var c = setInterval(function() {
                                if (e.loadedAmap) {
                                    clearTimeout(c);
                                    var h = {
                                        container: "iCenter"
                                    };
                                    $.extend(h, d);
                                    $(".rest-list").hide();
                                    e.LBSmap(h);
                                    e.init(f);
                                    a.Busy.stop()
                                }
                            },
                            100)
                    }
                },
                LBSmap: function(b) {
                    this.centerLng = b.longitude;
                    this.centerLat = b.latitude;
                    this.containerId = b.container;
                    this.$container = $("#" + this.containerId);
                    this.storeList = b.storeList;
                    this.cityCode = b.cityCode;
                    this.syncTime = b.syncTime;
                    this.selectedIndex = b.selectedIndex;
                    this.currentInfoWindow = null;
                    this.infowidth = window.innerWidth - 20;
                    this.mapObj = new AMap.Map(this.containerId, {
                        view: new AMap.View2D({
                            center: new AMap.LngLat(this.centerLng, this.centerLat),
                            zoom: 14
                        })
                    });
                    this.addStoreMarker = function(h, p, m) {
                        var d = p[h];
                        var k = d.lng;
                        var o = d.lat;
                        if (k == null || o == null) {
                            return
                        }
                        var n = can.view("appViews/store_mapbooking.mustache", {
                            store: d,
                            _index: h,
                            infowidth: "width:" + this.infowidth + "px;"
                        });
                        var l = document.createElement("div");
                        var f = document.createElement("img");
                        f.style.width = "36px";
                        f.src = Config.wapcontext + "image/location_marker.png";
                        l.appendChild(f);
                        var i = {
                            map: this.mapObj,
                            position: new AMap.LngLat(k, o),
                            topWhenClick: true,
                            topWhenMouseOver: true,
                            content: l
                        };
                        var c = new AMap.Marker(i);
                        var e = new AMap.InfoWindow({
                            isCustom: true,
                            content: n,
                            autoMove: false,
                            offset: new AMap.Pixel(8, -40),
                            closeWhenClickMap: true
                        });
                        var g = this;
                        var j = function() {
                            var s = g.mapObj.getZoom();
                            var q = g.mapObj.lngLatToContainer(c.getPosition(), s);
                            var r = g.mapObj.lngLatToContainer(g.mapObj.getCenter(), s);
                            m.init_mapItem(h, p, e.getContent(), m,
                                function(t) {
                                    if (t) {
                                        g.mapObj.panBy(r.getX() - q.getX() - 8, r.getY() - q.getY() + 160)
                                    } else {
                                        g.mapObj.panBy(r.getX() - q.getX() - 8, r.getY() - q.getY() + 20)
                                    }
                                });
                            setTimeout(function() {
                                    e.set("toBeClose", false);
                                    e.open(g.mapObj, c.getPosition())
                                },
                                700)
                        };
                        AMap.event.addListener(c, "click", j)
                    },
                        this.init = function(e) {
                            var c = this;
                            this.$container.css("height", parseInt(window.innerHeight - $(".rest-menu").height() - $(".wrapper-head").height()) + "px");
                            this.$container.show();
                            var d = this.storeList;
                            this.mapObj.plugin("AMap.CloudDataLayer",
                                function() {
                                    c.myselfMarker(e);
                                    for (var f = 0; f < d.length; f++) {
                                        c.addStoreMarker(f, d, e)
                                    }
                                });
                            $(".amap-logo").hide();
                            $(".amap-copyright").hide()
                        },
                        this.clear = function() {
                            this.$container.hide();
                            this.mapObj.clearMap();
                            delete this.mapObj
                        },
                        this.clearInfo = function() {
                            this.mapObj.clearInfoWindow()
                        },
                        this.myselfMarker = function(h) {
                            if (h.onTable == "nearby") {
                                var d = this;
                                var c = h.longitude;
                                var e = h.latitude;
                                if (c == null || e == null) {
                                    return
                                }
                                var g = {
                                    map: d.mapObj,
                                    icon: Config.wapcontext + "image/me.png",
                                    position: new AMap.LngLat(c, e),
                                    topWhenClick: true,
                                    topWhenMouseOver: true
                                };
                                var f = new AMap.Marker(g)
                            }
                        }
                }
            },
            WX: {
                authorizePage: function(b) {
                    b = window.location.origin + Config.wapcontext + b;
                    var c = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=" + Config.WX.appId + "&redirect_uri=" + b + "&response_type=code&scope=snsapi_base#wechat_redirect";
                    window.location = c
                }
            },
            Format: {
                token: /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
                timezone: /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
                timezoneClip: /[^-+\dA-Z]/g,
                pad: function(b, c) {
                    b = String(b);
                    c = c || 2;
                    while (b.length < c) {
                        b = "0" + b
                    }
                    return b
                },
                dateFormater: function(p, e, h) {
                    var f = this;
                    if (arguments.length == 1 && Object.prototype.toString.call(p) == "[object String]" && !/\d/.test(p)) {
                        e = p;
                        p = undefined
                    }
                    p = p ? new Date(p) : new Date;
                    if (isNaN(p)) {
                        throw SyntaxError("invalid date")
                    }
                    e = String(f.masks[e] || e || f.masks["default"]);
                    if (e.slice(0, 4) == "UTC:") {
                        e = e.slice(4);
                        h = true
                    }
                    var o = h ? "getUTC": "get",
                        k = p[o + "Date"](),
                        b = p[o + "Day"](),
                        d = p[o + "Month"](),
                        m = p[o + "FullYear"](),
                        j = p[o + "Hours"](),
                        n = p[o + "Minutes"](),
                        g = p[o + "Seconds"](),
                        l = p[o + "Milliseconds"](),
                        c = h ? 0: p.getTimezoneOffset(),
                        i = {
                            d: k,
                            dd: f.pad(k),
                            ddd: f.i18n.dayNames[b],
                            dddd: f.i18n.dayNames[b + 7],
                            m: d + 1,
                            mm: f.pad(d + 1),
                            mmm: f.i18n.monthNames[d],
                            mmmm: f.i18n.monthNames[d + 12],
                            yy: String(m).slice(2),
                            yyyy: m,
                            h: j % 12 || 12,
                            hh: f.pad(j % 12 || 12),
                            H: j,
                            HH: f.pad(j),
                            M: n,
                            MM: f.pad(n),
                            s: g,
                            ss: f.pad(g),
                            l: f.pad(l, 3),
                            L: f.pad(l > 99 ? Math.round(l / 10) : l),
                            t: j < 12 ? "a": "p",
                            tt: j < 12 ? "am": "pm",
                            T: j < 12 ? "A": "P",
                            TT: j < 12 ? "AM": "PM",
                            Z: h ? "UTC": (String(p).match(f.timezone) || [""]).pop().replace(f.timezoneClip, ""),
                            o: (c > 0 ? "-": "+") + f.pad(Math.floor(Math.abs(c) / 60) * 100 + Math.abs(c) % 60, 4),
                            S: ["th", "st", "nd", "rd"][k % 10 > 3 ? 0: (k % 100 - k % 10 != 10) * k % 10]
                        };
                    return e.replace(f.token,
                        function(q) {
                            return q in i ? i[q] : q.slice(1, q.length - 1)
                        })
                },
                masks: {
                    "default": "ddd mmm dd yyyy HH:MM:ss",
                    shortDate: "m/d/yy",
                    mediumDate: "mmm d, yyyy",
                    longDate: "mmmm d, yyyy",
                    fullDate: "dddd, mmmm d, yyyy",
                    shortTime: "HH:MM",
                    mediumTime: "h:MM:ss TT",
                    longTime: "h:MM:ss TT Z",
                    isoDate: "yyyy-mm-dd",
                    isoTime: "HH:MM:ss",
                    isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
                    isoUtcDateTime: "yyyy-mm-dd'T'HH:MM:ss.lo",
                    chineseDate: "yyyy年mm月dd日",
                    DateTime: "yyyy-mm-dd HH:MM",
                    chineseDatetime: "yyyy年mm月dd日 HH点MM分",
                    chineseshortDate: "HH点MM分",
                    DateTimeYMD: "yyyy/mm/dd",
                    pointYMD: "yyyy.mm.dd",
                    chineseDatetime2: "yyyy年mm月dd日 HH:MM",
                    chineseDate3: "yyyy年mm月dd号 "
                },
                i18n: {
                    dayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                    monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
                },

            }
        };
        window.Util = a;
        return a
    });